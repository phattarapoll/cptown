const SPREADSHEET_ID = '1H52HRx2loIpta5tLpLy7UWHQF2UDbvG-XTQ30mxJFoY';
const CALENDAR_ID = '0afed3760ac3168dd3e2bdc8d3f9c2fe21abaf0f7128f5cd3b2259bc458f7b2d@group.calendar.google.com';

function doGet(e) {
  try {
    const ss = SpreadsheetApp.openById(SPREADSHEET_ID);
    const configSheet = ss.getSheetByName('config');
    const bookingSheet = ss.getSheetByName('Booking');

    if (!configSheet || !bookingSheet) {
      throw new Error('Sheets "config" or "Booking" not found.');
    }

    // --- ดึงข้อมูล Config ---
    const configDataRaw = configSheet.getRange('A9:D').getValues();
    
    const unavailableDates = [];
    const holidayNames = [];

    configDataRaw.forEach(row => {
      const date = row[0]; // คอลัมน์ A
      const holidayName = row[3]; // คอลัมน์ D
      if (date) {
        unavailableDates.push(Utilities.formatDate(new Date(date), Session.getScriptTimeZone(), 'yyyy-MM-dd'));
        holidayNames.push(holidayName ? String(holidayName).trim() : '');
      }
    });
    const unavailableWeekdays = configSheet.getRange('B2:B8').getValues().flat().filter(String).map(Number);
    
    const timeSlots = ["08:30-09:30", "09:30-10:30", "10:30-11:00", "11:00-11:30"];
    const config = {
      unavailableDates,
      unavailableWeekdays,
      timeSlots,
      holidayNames
    };

    // --- ดึงข้อมูลการจอง (Bookings) พร้อม No-Show Status และนับจำนวนผิดนัด ---
    const bookingRange = bookingSheet.getDataRange();
    const bookingValues = bookingRange.getValues();
    const bookingData = {};
    const noShowCount = {}; // สำหรับเก็บจำนวนการผิดนัดของแต่ละคน

    if (bookingValues.length > 1) {
      const header = bookingValues[0];
      const dateColumnIndex = header.indexOf('BookingDate');
      const timeSlotColumnIndex = header.indexOf('TimeSlot');
      const noShowStatusColumnIndex = header.indexOf('NoShowStatus'); // คอลัมน์ G (สมมติว่าคุณเพิ่ม Header นี้แล้ว)
      const fullNameColumnIndex = header.indexOf('FullName'); // คอลัมน์ B

      if (dateColumnIndex === -1 || timeSlotColumnIndex === -1 || noShowStatusColumnIndex === -1 || fullNameColumnIndex === -1) {
        // หากไม่มี 'NoShowStatus' หรือ 'FullName' จะยังทำงานต่อได้ แต่เตือน
        Logger.log('Warning: Booking sheet is missing "NoShowStatus" or "FullName" header. Functionality might be limited.');
      }

      for (let i = 1; i < bookingValues.length; i++) {
        const row = bookingValues[i];
        const dateRaw = row[dateColumnIndex];
        const timeSlot = row[timeSlotColumnIndex];
        const noShowStatus = row[noShowStatusColumnIndex]; // ดึงสถานะ No-Show
        const fullName = row[fullNameColumnIndex]; // ดึงชื่อผู้จอง

        if (dateRaw && timeSlot) {
          const date = Utilities.formatDate(new Date(dateRaw), Session.getScriptTimeZone(), 'yyyy-MM-dd');
          if (!bookingData[date]) {
            bookingData[date] = {};
          }
          if (!bookingData[date][timeSlot]) {
            // โครงสร้างใหม่: เก็บ count, fullName, noShowStatus สำหรับการแสดงผลใน slot
            bookingData[date][timeSlot] = { count: 0, fullName: '', noShowStatus: '' };
          }
          
          bookingData[date][timeSlot].count++;
          bookingData[date][timeSlot].fullName = fullName ? String(fullName).trim() : '';
          bookingData[date][timeSlot].noShowStatus = noShowStatus ? String(noShowStatus).trim() : '';
        }

        // นับจำนวน No-Show ของแต่ละคน (NoShowStatus = 1 คือไม่มาตามนัด)
        if (fullName && noShowStatus === 1) {
            const key = String(fullName).trim();
            noShowCount[key] = (noShowCount[key] || 0) + 1;
        }
      }
    }

    // ส่งข้อมูล noShowCount กลับไปยัง frontend ด้วย
    return ContentService.createTextOutput(JSON.stringify({ config, bookings: bookingData, noShowCount }))
      .setMimeType(ContentService.MimeType.JSON);
  } catch (error) {
    console.error(`Error in doGet: ${error.message}`);
    return ContentService.createTextOutput(JSON.stringify({ error: error.message }))
      .setMimeType(ContentService.MimeType.JSON);
  }
}

function doPost(e) {
  try {
    const ss = SpreadsheetApp.openById(SPREADSHEET_ID);
    const configSheet = ss.getSheetByName('config');
    const bookingSheet = ss.getSheetByName('Booking');
    const calendar = CalendarApp.getCalendarById(CALENDAR_ID);
    
    if (!bookingSheet) {
      throw new Error('Sheet "Booking" not found.');
    }
    if (!calendar) {
      throw new Error('Calendar not found.');
    }

    const { fullName, telNumber, bookingDate, timeSlot, bookingReason } = e.parameter;
    if (!fullName || !telNumber || !bookingDate || !timeSlot || !bookingReason) {
      throw new Error('Missing required booking data.');
    }

    // --- การตรวจสอบวันจองล่วงหน้า (ไม่เกิน 32 วันทำการ) ---
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    const bookingDateObject = new Date(bookingDate);
    bookingDateObject.setHours(0, 0, 0, 0);

    let unavailableDates = [];
    if (configSheet) {
      const configDataRaw = configSheet.getRange('A9:A').getValues();
      unavailableDates = configDataRaw.map(row => {
        const date = row[0];
        if (date instanceof Date) {
          return Utilities.formatDate(date, Session.getScriptTimeZone(), 'yyyy-MM-dd');
        }
        return null;
      }).filter(date => date !== null);
    }
    
    let daysCounter = 0;
    let checkDate = new Date(today);
    checkDate.setDate(checkDate.getDate() + 1); // เริ่มนับจากวันถัดไป
    
    while(checkDate <= bookingDateObject) {
      const dayOfWeek = checkDate.getDay();
      const formattedDate = Utilities.formatDate(checkDate, Session.getScriptTimeZone(), 'yyyy-MM-dd');
      
      // ตรวจสอบวันทำการ: ไม่ใช่วันอาทิตย์ (0) และไม่ใช่วันเสาร์ (6) และไม่ใช่วันหยุดที่กำหนด
      if (dayOfWeek !== 0 && dayOfWeek !== 6 && !unavailableDates.includes(formattedDate)) {
        daysCounter++;
      }
      checkDate.setDate(checkDate.getDate() + 1);
      if (daysCounter > 40) break; // ป้องกัน Loop
    }
    
    if (daysCounter > 32) { // ถ้าจำนวนวันทำการที่นับได้เกิน 32 วัน
      return ContentService.createTextOutput('Error: ไม่สามารถจองล่วงหน้าเกิน 32 วันทำการได้');
    }
    // --- สิ้นสุดการตรวจสอบวันจองล่วงหน้า ---

    const dateParts = bookingDate.split('-');
    const dateObject = new Date(Number(dateParts[0]), Number(dateParts[1]) - 1, Number(dateParts[2]));
    
    const [timeStart, timeEnd] = timeSlot.split('-');
    const [startHour, startMinute] = timeStart.split(':').map(Number);
    const [endHour, endMinute] = timeEnd.split(':').map(Number);

    const startDateTime = new Date(dateObject);
    startDateTime.setHours(startHour, startMinute, 0);

    const endDateTime = new Date(dateObject);
    endDateTime.setHours(endHour, endMinute, 0);

    bookingSheet.appendRow([
      new Date(),
      fullName,
      telNumber,
      dateObject,
      timeSlot,
      bookingReason,
      '' // <<<< เพิ่มค่าว่างสำหรับคอลัมน์ G: NoShowStatus (1 = ผิดนัด)
    ]);
    
    calendar.createEvent(
      `${fullName} (${bookingReason})`, 
      startDateTime,
      endDateTime,
      {
        description: `เบอร์โทร: ${telNumber}`,
        sendInvites: false,
        location: 'ตึกเก่า ทม.ชพ.',
        colorId: CalendarApp.EventColor.PALE_GREEN,
      }
    );
    
    sendBookingCardToLine({
      fullName: fullName,
      telNumber: telNumber,
      bookingDate: bookingDate,
      timeSlot: timeSlot,
      bookingReason: bookingReason
    });
    
    return ContentService.createTextOutput('Booking successful!');

  } catch (error) {
    console.error(`Error in doPost: ${error.message}`);
    return ContentService.createTextOutput('Error: ' + error.message);
  }
}